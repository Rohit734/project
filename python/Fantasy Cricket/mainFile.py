"""This page is Responsible for main GUI and signals """
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'u.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from fetchData import *
from evaluate import Ui_Dialog


class Ui_MainWindow(object):
    errorMessage = ''

    def setupUi(self, MainWindow):
        """Main Gui Window"""
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1257, 792)
        MainWindow.setFocusPolicy(QtCore.Qt.StrongFocus)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon/windowicon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("background-color: rgb(131, 130, 129);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.Rbat = QtWidgets.QRadioButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Segoe Script")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Rbat.setFont(font)
        self.Rbat.setObjectName("Rbat")
        self.horizontalLayout_4.addWidget(self.Rbat)
        self.Rbow = QtWidgets.QRadioButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Segoe Script")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Rbow.setFont(font)
        self.Rbow.setObjectName("Rbow")
        self.horizontalLayout_4.addWidget(self.Rbow)
        self.Rar = QtWidgets.QRadioButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Segoe Script")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Rar.setFont(font)
        self.Rar.setObjectName("Rar")
        self.horizontalLayout_4.addWidget(self.Rar)
        self.Rwk = QtWidgets.QRadioButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Segoe Script")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Rwk.setFont(font)
        self.Rwk.setObjectName("Rwk")
        self.horizontalLayout_4.addWidget(self.Rwk)
        self.gridLayout.addLayout(self.horizontalLayout_4, 4, 0, 1, 1)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_17 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Segoe Script")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_17.setFont(font)
        self.label_17.setObjectName("label_17")
        self.horizontalLayout_3.addWidget(self.label_17)
        self.pointavail = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Segoe Script")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pointavail.setFont(font)
        self.pointavail.setText("")
        self.pointavail.setObjectName("pointavail")
        self.horizontalLayout_3.addWidget(self.pointavail)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem)
        self.gridLayout.addLayout(self.horizontalLayout_3, 3, 0, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_15 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Segoe Script")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.horizontalLayout_2.addWidget(self.label_15)
        self.teamname = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Segoe Script")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.teamname.setFont(font)
        self.teamname.setText("")
        self.teamname.setObjectName("teamname")
        self.horizontalLayout_2.addWidget(self.teamname)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.gridLayout.addLayout(self.horizontalLayout_2, 4, 3, 1, 1)
        self.label_19 = QtWidgets.QLabel(self.centralwidget)
        self.label_19.setText("")
        self.label_19.setPixmap(QtGui.QPixmap("icon/cup.png"))
        self.label_19.setObjectName("label_19")
        self.gridLayout.addWidget(self.label_19, 5, 2, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_16 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Segoe Script")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.horizontalLayout.addWidget(self.label_16)
        self.pointused = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Segoe Script")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pointused.setFont(font)
        self.pointused.setText("")
        self.pointused.setObjectName("pointused")
        self.horizontalLayout.addWidget(self.pointused)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.gridLayout.addLayout(self.horizontalLayout, 3, 3, 1, 1)
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setObjectName("verticalLayout")
        self.groupBox = QtWidgets.QGroupBox(self.frame)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.groupBox.setFont(font)
        self.groupBox.setMouseTracking(False)
        self.groupBox.setStyleSheet("background-color: rgb(148, 148, 148);")
        self.groupBox.setObjectName("groupBox")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.BOW = QtWidgets.QGridLayout()
        self.BOW.setObjectName("BOW")
        self.bow = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.bow.setFont(font)
        self.bow.setObjectName("bow")
        self.BOW.addWidget(self.bow, 0, 2, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setText("")
        self.label_4.setPixmap(QtGui.QPixmap("icon/bow.png"))
        self.label_4.setObjectName("label_4")
        self.BOW.addWidget(self.label_4, 0, 0, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.BOW.addWidget(self.label_5, 0, 1, 1, 1)
        self.gridLayout_6.addLayout(self.BOW, 0, 1, 1, 1)
        self.WK = QtWidgets.QGridLayout()
        self.WK.setObjectName("WK")
        self.label_11 = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.WK.addWidget(self.label_11, 0, 1, 1, 1)
        self.label_10 = QtWidgets.QLabel(self.groupBox)
        self.label_10.setText("")
        self.label_10.setPixmap(QtGui.QPixmap("icon/wkt.png"))
        self.label_10.setObjectName("label_10")
        self.WK.addWidget(self.label_10, 0, 0, 1, 1)
        self.wk = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.wk.setFont(font)
        self.wk.setObjectName("wk")
        self.WK.addWidget(self.wk, 0, 2, 1, 1)
        self.gridLayout_6.addLayout(self.WK, 0, 3, 1, 1)
        self.AR = QtWidgets.QGridLayout()
        self.AR.setObjectName("AR")
        self.label_7 = QtWidgets.QLabel(self.groupBox)
        self.label_7.setText("")
        self.label_7.setPixmap(QtGui.QPixmap("icon/ar.png"))
        self.label_7.setObjectName("label_7")
        self.AR.addWidget(self.label_7, 0, 0, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.AR.addWidget(self.label_8, 0, 1, 1, 1)
        self.ar = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.ar.setFont(font)
        self.ar.setObjectName("ar")
        self.AR.addWidget(self.ar, 0, 2, 1, 1)
        self.gridLayout_6.addLayout(self.AR, 0, 2, 1, 1)
        self.BAT = QtWidgets.QGridLayout()
        self.BAT.setObjectName("BAT")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.BAT.addWidget(self.label_2, 0, 1, 1, 1)
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("icon/bat.png"))
        self.label.setObjectName("label")
        self.BAT.addWidget(self.label, 0, 0, 1, 1)
        self.bat = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.bat.setFont(font)
        self.bat.setObjectName("bat")
        self.BAT.addWidget(self.bat, 0, 2, 1, 1)
        self.gridLayout_6.addLayout(self.BAT, 0, 0, 1, 1)
        self.verticalLayout.addWidget(self.groupBox)
        self.gridLayout.addWidget(self.frame, 1, 0, 1, 4)
        self.listWidget_2 = QtWidgets.QListWidget(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Segoe Print")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.listWidget_2.setFont(font)
        self.listWidget_2.setStyleSheet("background-color: rgb(148, 148, 148);")
        self.listWidget_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.listWidget_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.listWidget_2.setObjectName("listWidget_2")
        self.gridLayout.addWidget(self.listWidget_2, 5, 3, 1, 1)
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Segoe Print")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.listWidget.setFont(font)
        self.listWidget.setStyleSheet("background-color: rgb(148, 148, 148);")
        self.listWidget.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.listWidget.setFrameShadow(QtWidgets.QFrame.Raised)
        self.listWidget.setObjectName("listWidget")
        self.gridLayout.addWidget(self.listWidget, 5, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1257, 26))
        self.menubar.setObjectName("menubar")
        self.menuTeam_manager = QtWidgets.QMenu(self.menubar)
        self.menuTeam_manager.setObjectName("menuTeam_manager")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.newteam = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icon/add.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.newteam.setIcon(icon1)
        self.newteam.setObjectName("newteam")
        self.openteam = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icon/open.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.openteam.setIcon(icon2)
        self.openteam.setObjectName("openteam")
        self.saveteam = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icon/save.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.saveteam.setIcon(icon3)
        self.saveteam.setObjectName("saveteam")
        self.evaluateteam = QtWidgets.QAction(MainWindow)
        self.evaluateteam.setObjectName("evaluateteam")
        self.menuTeam_manager.addAction(self.newteam)
        self.menuTeam_manager.addAction(self.openteam)
        self.menuTeam_manager.addAction(self.saveteam)
        self.menuTeam_manager.addSeparator()
        self.menuTeam_manager.addAction(self.evaluateteam)
        self.menubar.addAction(self.menuTeam_manager.menuAction())

        self.Rwk.setEnabled(False)
        self.Rbow.setEnabled(False)
        self.Rbat.setEnabled(False)
        self.Rar.setEnabled(False)
        self.menuTeam_manager.triggered[QtWidgets.QAction].connect(self.TeamManager)
        self.Rbat.toggled.connect(self.playersCategory)
        self.Rbow.toggled.connect(self.playersCategory)
        self.Rwk.toggled.connect(self.playersCategory)
        self.Rar.toggled.connect(self.playersCategory)
        self.listWidget.itemDoubleClicked.connect(self.displaylist)
        self.listWidget_2.itemDoubleClicked.connect(self.selectlist)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Fantasy Cricket"))
        self.Rbat.setText(_translate("MainWindow", "BAT"))
        self.Rbow.setText(_translate("MainWindow", "BOW"))
        self.Rar.setText(_translate("MainWindow", "AR"))
        self.Rwk.setText(_translate("MainWindow", "WK"))
        self.label_17.setText(_translate("MainWindow", "Point Available :"))
        self.label_15.setText(_translate("MainWindow", "Team Name :"))
        self.label_16.setText(_translate("MainWindow", "Point Used :"))
        self.groupBox.setTitle(_translate("MainWindow", "Your Selection"))
        self.bow.setText(_translate("MainWindow", "0"))
        self.label_5.setText(_translate("MainWindow", "Bowlers(BOW) : "))
        self.label_11.setText(_translate("MainWindow", "Wicket-Keeper(WK) : "))
        self.wk.setText(_translate("MainWindow", "0"))
        self.label_8.setText(_translate("MainWindow", "All-Rounder(AR) : "))
        self.ar.setText(_translate("MainWindow", "0"))
        self.label_2.setText(_translate("MainWindow", "Batsmen(BAT) : "))
        self.bat.setText(_translate("MainWindow", "0"))
        self.menuTeam_manager.setTitle(_translate("MainWindow", "Team manager"))
        self.newteam.setText(_translate("MainWindow", "New Team"))
        self.openteam.setText(_translate("MainWindow", "Open Team"))
        self.saveteam.setText(_translate("MainWindow", "Save Team"))
        self.evaluateteam.setText(_translate("MainWindow", "Evaluate Team"))

    def EnableRadioButton(self):  # use to enable radio_button
        """This function Enable RadioButton"""
        self.Rbat.checkStateSet()
        self.Rwk.checkStateSet()
        self.Rar.checkStateSet()
        self.Rwk.setEnabled(True)
        self.Rbow.setEnabled(True)
        self.Rbat.setEnabled(True)
        self.Rar.setEnabled(True)

    def TeamManager(self, action):
        """This function is responsible for all menu option like New Team,Open Team,Save Team and Evaluate Team"""

        action_name = (action.text())
        if action_name == 'New Team':       # new team
            teamName, ok = QtWidgets.QInputDialog.getText(MainWindow, "Team", "Enter name of team:")
            if ok:
                data["teamName"] = teamName.capitalize()
                if checkTeam():
                    self.SetToZero()
                    self.playerNumber()
                    self.EnableRadioButton()
                    playerInformation()
                    self.availablePoints()
                    self.usedPoints()
                else:
                    self.errorMessage = "Team Already exists. \n Try again"
                    self.showError()

        if action_name == 'Open Team':  # opens saved team
            teamName, ok = QtWidgets.QInputDialog.getText(MainWindow, "Team", "Enter name of team:")
            if ok:
                data["teamName"] = teamName.capitalize()
                if not checkTeam():
                    self.SetToZero()
                    openTeam()
                    self.playerNumber()
                    self.EnableRadioButton()
                    self.listWidget_2.addItems(data["playersName"])
                    self.availablePoints()
                    self.usedPoints()
                else:
                    self.errorMessage = "Team does not exist. \n Try again"
                    self.showError()

        if action_name == 'Save Team':     # save New teams and update save team
            try:
                if len(data["selectedPlayer"]) < 11:
                    self.errorMessage = "Insufficient players \nYour team must have 11 players"
                    self.showError()
                else:
                    self.errorMessage = saveTeam()
                    self.showError()
            except Exception as e:
                self.errorMessage = "You need to select New team or Open team in order to save.\n\t\tTry again"
                self.showError()

        if action_name == 'Evaluate Team':      # Evaluate Team and display it
            Dialog = QtWidgets.QDialog()
            ui = Ui_Dialog()
            ui.setupUi(Dialog)
            Dialog.exec_()

    def playersCategory(self):
        """This function display player according to their CTG with respect to RadioButton """
        if self.Rbat.isChecked():
            self.listWidget.clear()
            for player in data["batsmen"]:
                self.listWidget.addItem(player[0])

        if self.Rbow.isChecked():
            self.listWidget.clear()
            for player in data["bowler"]:
                self.listWidget.addItem(player[0])

        if self.Rwk.isChecked():
            self.listWidget.clear()
            for player in data["wicketkeeper"]:
                self.listWidget.addItem(player[0])

        if self.Rar.isChecked():
            self.listWidget.clear()
            for player in data["allrounder"]:
                self.listWidget.addItem(player[0])

    def displaylist(self, item):  # list in which all player are display according to their CTG
        """This function gets activated when user doubleClick on displaylist (listWidget) item
           and adds player to selected list and remove from displaylist"""
        if self.selectPlayer(item.text()):
            self.listWidget.takeItem(self.listWidget.row(item))
            self.listWidget_2.addItem(item.text())
            data["selectedPlayer"].append(getInfo(item.text()))     # adding name of selected players
        else:
            self.showError()        # display Error message

    def selectlist(self, item):  # list in which selected play will be display
        """This function gets activated when user doubleClick on selectlist (listWidget_2) item
            and remove player from selectlist and add to displaylist"""
        self.listWidget_2.takeItem(self.listWidget_2.row(item))
        self.removePlayer(item.text())
        self.addPlayers(item.text())
        data["selectedPlayer"].remove(getInfo(item.text()))     # updating unselected player

    def addPlayers(self, item):
        """checks whether removePlayer belong to CTG that is selected currently
            if it is selected then player is added to displaylist"""
        value = getInfo(item)
        if self.Rbat.isChecked() and value[1] == "BAT":
            self.listWidget.addItem(item)
        elif self.Rbow.isChecked() and value[1] == "BWL":
            self.listWidget.addItem(item)
        elif self.Rar.isChecked() and value[1] == "AR":
            self.listWidget.addItem(item)
        elif self.Rwk.isChecked() and value[1] == "WK":
            self.listWidget.addItem(item)

    def selectPlayer(self, item):  # selected player will be removed from their display list with respect to CTG and also checks condition
        """This function is responsible to count players according to their CTG, display number of players selected, checks the condition for all category
            and if the condition is False remove players from respective CTG"""
        value = getInfo(item)
        if value[1] == "BAT":
            data["count_batsmen"] += 1
            if data["count_batsmen"] > 4:
                data["count_batsmen"] -= 1
                self.errorMessage = "You cannot select more than 4 Batsmen \nTry Again"
                return False
            else:
                data["batsmen"].remove(value)
                self.bat.setText(str(data["count_batsmen"]))
                self.usedPoints(value[2])       # Update available and used Points when player is selected
                return True

        elif value[1] == "BWL":
            data["count_bowler"] += 1
            if data["count_bowler"] > 3:
                data["count_bowler"] -= 1
                self.errorMessage = "You cannot select more than 3 Bowler \nTry Again"
                return False
            else:
                data["bowler"].remove(value)
                self.bow.setText(str(data["count_bowler"]))
                self.usedPoints(value[2])       # Update available and used Points when player is selected
                return True

        elif value[1] == "AR":
            data["count_allrounder"] += 1
            if data["count_allrounder"] > 3:
                data["count_allrounder"] -= 1
                self.errorMessage = "You cannot select more than 3 All-Round \nTry Again"
                return False
            else:
                data["allrounder"].remove(value)
                self.ar.setText(str(data["count_allrounder"]))
                self.usedPoints(value[2])       # Update available and used Points when player is selected
                return True

        elif value[1] == "WK":
            data["count_wicketkeeper"] += 1
            if data["count_wicketkeeper"] > 1:
                data["count_wicketkeeper"] -= 1
                self.errorMessage = "You cannot select more than 1 Wicket-keeper \nTry Again"
                return False
            else:
                data["wicketkeeper"].remove(value)
                self.wk.setText(str(data["count_wicketkeeper"]))
                self.usedPoints(value[2])       # Update available and used Points when player is selected
                return True

    def removePlayer(self, item):  # unselected player will be append to list with respect to CTG
        """Removes player from selectedList, add removed player to respective CTG list, calculate number of players according to CTG and displays it"""
        value = getInfo(item)
        if value[1] == "BAT":
            data["batsmen"].append(value)
            data["count_batsmen"] -= 1
            self.bat.setText(str(data["count_batsmen"]))
            self.availablePoints(value[2])      # update available and used points  when player is unselected

        elif value[1] == "BWL":
            data["bowler"].append(value)
            data["count_bowler"] -= 1
            self.bow.setText(str(data["count_bowler"]))
            self.availablePoints(value[2])      # update available and used points  when player is unselected

        elif value[1] == "AR":
            data["allrounder"].append(value)
            data["count_allrounder"] -= 1
            self.ar.setText(str(data["count_allrounder"]))
            self.availablePoints(value[2])      # update available and used points  when player is unselected

        elif value[1] == "WK":
            data["wicketkeeper"].append(value)
            data["count_wicketkeeper"] -= 1
            self.wk.setText(str(data["count_wicketkeeper"]))
            self.availablePoints(value[2])      # update available and used points  when player is unselected

    def availablePoints(self, value=0):  # use to add value to pointAvailable and subtract value from pointUsed
        """calculate Available points """
        data["pointAvailable"] += value
        self.pointavail.setText(str(data["pointAvailable"]))
        data["pointUsed"] -= value
        self.pointused.setText(str(data["pointUsed"]))

    def usedPoints(self, value=0):      # use to subtract value from pointAvailable and add value to pointUsed
        """calculate Used points"""
        data["pointUsed"] += value
        self.pointused.setText(str(data["pointUsed"]))
        data["pointAvailable"] -= value
        self.pointavail.setText(str(data["pointAvailable"]))

    def showError(self):
        """This function is used to display Error message """
        Dialog = QtWidgets.QMessageBox()
        Dialog.setStyleSheet("background-color: rgb(131, 130, 129);")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon/windowicon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Dialog.setWindowIcon(icon)
        Dialog.setText(self.errorMessage)
        Dialog.setWindowTitle("Fantasy Cricket")

        Dialog.exec_()

    def SetToZero(self):    # will set all value to zero when new team is created
        """Used to set everything to zero"""
        self.listWidget.clear()
        self.listWidget_2.clear()
        data["selectedPlayer"] = []
        data["count_batsmen"] = 0
        data["count_bowler"] = 0
        data["count_wicketkeeper"] = 0
        data["count_allrounder"] = 0
        data["pointUsed"] = 0
        data["pointAvailable"] = 0
        self.playerNumber()

    def playerNumber(self):     # displays number of players
        """This function is called to display Number of player"""
        self.teamname.setText(data["teamName"])
        self.bat.setText(str(data["count_batsmen"]))
        self.bow.setText(str(data["count_bowler"]))
        self.ar.setText(str(data["count_allrounder"]))
        self.wk.setText(str(data["count_wicketkeeper"]))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
